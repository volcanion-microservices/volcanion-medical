// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Volcanion.Medical.Models.Context;

#nullable disable

namespace Volcanion.Medical.Presentation.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241115160055_InitialDatabase")]
    partial class InitialDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Volcanion.Medical.Models.Entities.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("Avatar")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Account");
                });

            modelBuilder.Entity("Volcanion.Medical.Models.Entities.GrantPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("RolePermissionId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("RolePermissionId");

                    b.ToTable("GrantPermissions");
                });

            modelBuilder.Entity("Volcanion.Medical.Models.Entities.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1b7a7e07-8f94-441a-a59e-6697569da53a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4613), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "All"
                        },
                        new
                        {
                            Id = new Guid("8584dc8f-8958-47d8-af7d-9758b3116217"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4615), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "Create"
                        },
                        new
                        {
                            Id = new Guid("249df9f9-9904-4a37-9036-593cd1f8c9e0"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4616), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "Read"
                        },
                        new
                        {
                            Id = new Guid("cfa5b453-dfd5-4501-8be7-2ee3308105d2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4617), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "Update"
                        },
                        new
                        {
                            Id = new Guid("d71fe371-1ec0-4ea8-972f-7718a76637b1"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4626), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "SoftDelete"
                        },
                        new
                        {
                            Id = new Guid("d2c01da2-aef7-48aa-8877-02a6ba3e762a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4627), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "HardDelete"
                        },
                        new
                        {
                            Id = new Guid("949984cf-ee26-44ac-94e4-51cb02fea52b"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4628), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "Grant"
                        });
                });

            modelBuilder.Entity("Volcanion.Medical.Models.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("894b6169-003a-47ea-a9fd-12e10ed51d45"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4473), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = new Guid("4add3af4-c302-4839-99b7-3062d3bb9195"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4477), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "Account"
                        },
                        new
                        {
                            Id = new Guid("929b2b26-d286-4474-ab10-c560dff2e5b5"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4479), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "Role"
                        },
                        new
                        {
                            Id = new Guid("381e5d58-0e49-4306-a649-cc7c355912c7"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4480), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "Permission"
                        },
                        new
                        {
                            Id = new Guid("42cb1ad0-cfec-472d-83ba-e64b4e6ff4f3"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4481), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "RolePermission"
                        },
                        new
                        {
                            Id = new Guid("8f454144-8fe2-4ccd-8c2c-61232a5bbaae"),
                            CreatedAt = new DateTimeOffset(new DateTime(2024, 11, 15, 16, 0, 54, 330, DateTimeKind.Unspecified).AddTicks(4482), new TimeSpan(0, 0, 0, 0, 0)),
                            IsActived = true,
                            IsDeleted = false,
                            Name = "GrantPermission"
                        });
                });

            modelBuilder.Entity("Volcanion.Medical.Models.Entities.RolePermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsActived")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("char(36)");

                    b.Property<DateTimeOffset?>("UpdatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("Volcanion.Medical.Models.Entities.GrantPermission", b =>
                {
                    b.HasOne("Volcanion.Medical.Models.Entities.Account", "Account")
                        .WithMany("GrantPermissions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Volcanion.Medical.Models.Entities.RolePermission", "RolePermission")
                        .WithMany("GrantPermissions")
                        .HasForeignKey("RolePermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("RolePermission");
                });

            modelBuilder.Entity("Volcanion.Medical.Models.Entities.RolePermission", b =>
                {
                    b.HasOne("Volcanion.Medical.Models.Entities.Permission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Volcanion.Medical.Models.Entities.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Volcanion.Medical.Models.Entities.Account", b =>
                {
                    b.Navigation("GrantPermissions");
                });

            modelBuilder.Entity("Volcanion.Medical.Models.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Volcanion.Medical.Models.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Volcanion.Medical.Models.Entities.RolePermission", b =>
                {
                    b.Navigation("GrantPermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
